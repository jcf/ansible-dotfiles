#!/usr/bin/env ruby

# Inspired by the work of Anton Zolotov (http://j.mp/RSNQDz)
#
# Refactored by James Conroy-Finn
#
# - Use app name instead of remote when talking to Heroku. This is now a
#   required argument when calling clone.
# - Support running clone and import separately.
# - Run database.yml through ERB before parsing it.
# - Exit immediately if any command fails.
# - Use ENV['USER'] to find the local database user instead of shelling out to
#   `whoami`.

require 'erb'

module Heroku
  class Db < Thor
    include Thor::Actions

    class_option :dbname, type: :string
    class_option :dump,   type: :string,  default: 'latest.dump'
    class_option :host,   type: :string,  default: 'localhost'
    class_option :keep,   type: :boolean, default: false
    class_option :user,   type: :string,  default: ENV['USER']

    desc 'clone APP_NAME', 'Clone a remote heroku database to the local environment'
    def clone(app_name)
      invoke 'heroku:db:backup'
      invoke 'heroku:db:download'
      invoke 'heroku:db:import', []
    end

    desc 'backup APP_NAME', 'Create a database backup'
    def backup(app_name)
      run! "heroku pgbackups:capture --expire --app #{app_name}"
    end

    desc 'download APP_NAME', 'Download the most recent database backup'
    def download(app_name)
      run! "wget -O #{options[:dump]} `heroku pgbackups:url --app #{app_name}`"
    end

    desc 'import', 'Import the downloaded database backup (latest.dump by default)'
    def import
      load_dump_in_to_local_db
      remove_file options[:dump] unless options[:keep]
    end

    private

    def run!(cmd)
      run cmd

      unless $?.success?
        say "Command exited with status #{$?.to_i}. Exiting.", :red
        exit! $?.exitstatus
      end
    end

    def load_dump_in_to_local_db
      switches = {
        '-h' => options[:host],
        '-U' => options[:user],
        '-d' => (options[:dbname] || dbname)
      }.to_a.join(' ')

      run! "pg_restore --verbose --clean --no-acl --no-owner #{switches} #{options[:dump]}"
    end

    def database_erb
      ERB.new(File.read('config/database.yml')).result
    rescue Errno::ENOENT
      say "config/database.yml could not be found. Are you in a Rails app?", :red
      exit!
    end

    def dbname
      YAML.load(database_erb)['development']['database']
    end
  end
end
