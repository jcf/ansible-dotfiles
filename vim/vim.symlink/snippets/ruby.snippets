global !p
import sys, re, os

def classify(string):
  return ''.join(x for x in string.title() if not x.isspace() and x != '_')

def classify_path(path):
  match = re.match(r'^(?:(?:app/.*?/)|(?:lib/)|(?:src/)|(?:spec/.*?/))?(.*)$', path).group(1)
  root = os.path.splitext(match)[0]
  return classify(root.replace('/', '::'))

def despec(string):
  return re.sub(r'_spec$', '', string)

endglobal

snippet #u "# encoding: utf-8" !
# encoding: utf-8
$0
endsnippet

snippet cl "class ClassName" !
class ${1:`!p snip.rv = classify_path(snip.basename)`}
  $0
end
endsnippet


snippet cla "class ClassName initialize" !
class ${1:`!p snip.rv = classify_path(snip.basename)`}
  def initialize${2/.+/(/}${2:args}${2/.+/)/}
    $0
  end
end
endsnippet


snippet clas "class << self ... end" !
class << ${1:self}
  $0
end
endsnippet


snippet m "module" !
module ${1:`!p snip.rv = classify_path(snip.basename)`}
  $0
end
endsnippet


snippet mod "module included" !
module ${1:`!p snip.rv = classify_path(snip.basename)`}
  def self.included${2/.+/(/}${2:args}${2/.+/)/}
    $0
  end
end
endsnippet



snippet r "attr_reader ..." !b
attr_reader :${0:name}
endsnippet

snippet w "attr_writer ..." !b
attr_writer :${0:name}
endsnippet

snippet rw "attr_accessor ..." !b
attr_accessor :${0:name}
endsnippet


snippet defs "def self.<name>..." !
def self.${1:name}
  ${0:# TODO}
end
endsnippet

snippet def "def <name>..." !
def ${1:name}
  ${0:# TODO}
end
endsnippet

snippet "\b(de)?fi" "def initialize ..." r!
def initialize${1/.+/(/}${1:args}${1/.+/)/}
  ${0:# TODO}
end
endsnippet



snippet al "alias <to> <from>" !
alias ${1:to} ${2:from}
endsnippet


snippet ./ "File.expand_path __FILE__" !
File.expand_path '../$0', __FILE__
endsnippet


snippet pry "Pry that binding" !
require 'pry'; binding.pry$0
endsnippet


snippet desc "require 'spec_helper' ... describe" !
require 'spec_helper'

describe ${1:`!p snip.rv = classify_path(despec(snip.basename))`} do
  $0
end
endsnippet

snippet descc "require 'spec_helper' ... describe subject" !
require 'spec_helper'

describe ${1:`!p snip.rv = classify_path(despec(snip.basename))`} do
  subject(:`!p snip.rv = despec(snip.basename)`) { `!p snip.rv = classify_path(despec(snip.basename))`.new }

  $0
end
endsnippet

snippet sub "subject(:etc)" !
subject(:`!p snip.rv = despec(snip.basename)`) { `!p snip.rv = classify_path(despec(snip.basename))`.new }
endsnippet

snippet des "describe 'method_name'" !
describe '${1:method_name}' do
  $0
end
endsnippet

snippet bef "before do ... end" !
before do
  $0
end
endsnippet


snippet let "let(:x) {}" !
let(:${1:name}) { $0 }
endsnippet


snippet con "context 'when'" !
context '${1:when}' do
  $0
end
endsnippet


snippet it "it 'does'" !
it '${1:does}' do
  $0
end
endsnippet
