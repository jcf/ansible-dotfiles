#!/usr/bin/env ruby

require 'rubygems' if RUBY_VERSION < '1.9'
require 'thor'

class Dotfiles < Thor
  VERSION = '0.1.1'
  DIRECTORY = File.expand_path('~/.dotfiles')

  default_task :help

  desc 'update', 'Update all the files in dotfiles'
  method_option :submodules, :type => :boolean, :default => false, :banner => 'Update submodules as well'
  def update
    say 'Updating dotfiles...'
    execute_in_dotfiles { |path| 'git pull --rebase' }

    if options['submodules']
      say 'Updating submodules...'
      execute_in_dotfiles do |path|
        %[git submodule -q foreach 'git checkout -q master && git pull -q --rebase origin master' > /dev/null]
      end
    end
  end

  desc 'open', 'Open dotfiles'
  def open
    system 'open', DIRECTORY
  end

  desc 'edit', 'Edit dotfiles in your editor'
  method_option :editor, :type => :string, :banner => 'Override $EDITOR'
  def edit(file = nil)
    system options[:editor] || ENV['EDITOR'], "#{DIRECTORY}/#{file}"
  end

  desc 'status', 'Git status within dotfiles'
  def status
    execute_in_dotfiles { 'git status -s' }
  end

  desc 'commit', 'Git commit dotfiles'
  def commit(*message_words)
    message = %[-m "#{message_words.join(' ')}"] unless message_words.empty?
    execute_in_dotfiles { "git commit -a #{message}" }
  end

  desc 'version', 'Prints the version of dotfiles'
  map %w(-v --version) => :version
  def version
    puts VERSION
  end

  private

  def execute_in_dotfiles
    begin
      Dir.chdir(DIRECTORY) { |path|
        system yield(path)
      }
    rescue => e
      say 'Something went wrong!', :red
      say "#{e.class}: #{e.message}"
    end
  end
end

Dotfiles.start
