#!/usr/bin/env ruby

begin
  require 'thor'
rescue LoadError
  $stderr.puts 'Thor is missing'
  abort
end

require 'pathname'

class Guardfiles < Thor
  include Thor::Actions

  GUARDFILES_PATH = Pathname.new('~/.guardfiles').expand_path

  default_task :start

  desc 'setup', 'Create the guardfiles directory in $HOME'
  def setup
    GUARDFILES_PATH.mkdir
    say "Created guardfiles directory in #{GUARDFILES_PATH}", :green
  end

  desc 'list', "List all Guardfiles in #{GUARDFILES_PATH}"
  def list
    abort_unless_guardfiles_setup!
    print_available_guardfiles
  end

  desc 'start [Guardfile]', 'Start Guard using the specified Guardfile and Bundler if present'
  def start(extension = 'rails')
    abort_unless_guardfiles_setup!
    start_guardfile_with_extension(extension)
  end

  private

  def abort_unless_guardfiles_setup!
    unless GUARDFILES_PATH.directory?
      say "Guardfiles directory not found. Run `#{__FILE__} setup`.", :red
      abort
    end
  end

  def print_available_guardfiles
    glob.each { |path| puts path }
  end

  def start_guardfile_with_extension(extension)
    guardfile = GUARDFILES_PATH.join("Guardfile.#{extension}")

    if guardfile.exist?
      command = "bundle exec guard -G #{guardfile}"
      say "Executing #{command}"
      exec command
    else
      say "#{guardfile} doesn't exist!", :red
      abort
    end
  end

  def glob_path
    Pathname.new(GUARDFILES_PATH.join('Guardfile.*'))
  end

  def glob
    Pathname.glob(glob_path)
  end
end

Guardfiles.start
